                   
                   ; *******************************
                   ; * Panic function Test Program *
                   ; *******************************
                   
                   ; This program triggers the "panic" function,
                   ; which handles unrecoverable errors
                   ; by printng the address from where it was called
                   ; and halting the system.
                   
                   ; **********************
                   ; * Header Definitions *
                   ; **********************
                   
                   ; *** global/variables.equ ***
                   
                            ; variables in internal ram
                   
0000:                       .equ    in,     0x30    ; pointer to input code
0000:                       .equ    out,    0x32    ; pointer to ouput code
                   
0000:                       .equ    stack,  0x40    ; beginning of stack
                   
                   ; *** serial/sfr.equ ***
                   
                   ; Special function registers for serial interface.
                   ; See chapter 14 of AT89C51ED2 datasheet, page 48ff.
                   
                   ; Internal Baud Rate Generator (BRG), see datasheet page 52.
0000:                       .equ    BRL,    0x9A    ; baud rate reload value
0000:                       .equ    BDRCON, 0x9B    ; BRG control register
                   
                   ; *************
                   ; * Main Code *
                   ; *************
                   
0000:                       .org    0
                   
                   
                   ; *** global/init.inc ***
                   
                   ; Initialize stack pointer and global variables.
                   ; This must be included early in the main program.
                   
0000: 75 81 40              mov     SP,     #STACK
                   
0003: 90 00 1A              mov     dptr,   #serial_tx
0006: 85 82 32              mov     OUT,    DPL
0009: 85 83 33              mov     OUT+1,  DPH
                   
                   ;        mov     dptr,   #serial_rx
                   ;        mov     IN,     DPL
                   ;        mov     IN+1,   DPH
                   
                   ; *** test/panic.asm ***
                   
000C: 11 10                 acall   serial_init
                   
000E: 11 6E                 acall   panic
                   
                   ; *********************
                   ; * Library Functions *
                   ; *********************
                   
                   ; *** serial/init.inc ***
                   
                   ; >> void serial_init() <<
                   
                   ; Initialize serial interface.
                   ; - assumes 20MHz clock and X2 mode
                   ; - uses internal baud rate generator
                   ; - speed: 9600 bits per second
                   ; Formula: BRL = 256 - (F_clk / (32 * Baud_Rate))
                   ; ---
                   ; See datasheet page 52 for details,
                   ; also note oscillator diagram on page 16!
                   
                   serial_init:
0010: 75 98 52              mov     SCON,   #0x52   ; SM1, REN, TI
0013: 75 9A BF              mov     BRL,    #191    ; 9600 @20MHz CLK
0016: 75 9B 1E              mov     BDRCON, #0x1e   ; BRR, RBCK, TBCK, SPD
0019: 22                    ret
                   
                   ; *** serial/tx.inc ***
                   
                   ; >> void serial_tx(char a) <<
                   
                   ; Transmit byte from accumulator.
                   
                   serial_tx:
001A: 30 99 FD              jnb     TI,     serial_tx
001D: C2 99                 clr     TI
001F: F5 99                 mov     SBUF,   a
0021: 22                    ret
                   
                   ; *** print/char.inc ***
                   
                   ; >> void print_char(char a) <<
                   
                   ; Print char from accumulator.
                   ; Indirect call to function behind COUT pointer.
                   
                   print_char:
0022: C0 32                 push    OUT
0024: C0 33                 push    OUT+1
0026: 22                    ret
                   
                   ; *** print/text.inc ***
                   
                   ; >> void print_text(char* dptr) <<
                   
                   ; Print null-terminated string from program code.
                   ; Aborts if no null terminator is found after 256 bytes.
                   
                   print_text:
0027: C0 E0                 push    ACC
0029: E8                    mov     a,      r0
002A: C0 E0                 push    ACC
                   
002C: E4                    clr     a
002D: F8                    mov     r0,     a
                   print_text__loop:
002E: 93                    movc    a,      @dptr+a
002F: 60 06                 jz      print_text__end
0031: 11 22                 acall   print_char
0033: 08                    inc     r0
0034: E8                    mov     a,      r0
0035: 70 F7                 jnz     print_text__loop
                   
                   print_text__end:
0037: D0 E0                 pop     ACC
0039: F8                    mov     r0,     a
003A: D0 E0                 pop     ACC
003C: 22                    ret
                   
                   ; *** print/hex.inc ***
                   
                   ; >> void print_hex_8(char a) <<
                   
                   ; Print hexadecimal number from accumulator.
                   
                   print_hex_8:
003D: C4                    swap    a       ; high nibble first
003E: 11 41                 acall   print_hex_8__nibble
0040: C4                    swap    a
                   print_hex_8__nibble:
0041: C0 E0                 push    ACC
0043: 54 0F                 anl     a,      #0x0f
0045: 24 90                 add     a,      #0x90
0047: D4                    da      a
0048: 34 40                 addc    a,      #0x40
004A: D4                    da      a
004B: 44 20                 orl     a,      #0x20   ; lower case
004D: 11 22                 acall   print_char
004F: D0 E0                 pop     ACC
0051: 22                    ret
                   
                   ; >> void print_hex_16(int r0r1) <<
                   
                   ; Print hexadecimal number from r0-r1.
                   
                   print_hex_16:
0052: C0 E0                 push    ACC
0054: E9                    mov     a,      r1      ; MSB first
0055: 11 3D                 acall   print_hex_8
0057: E8                    mov     a,      r0      ; LSB second
0058: 11 3D                 acall   print_hex_8
005A: D0 E0                 pop     ACC
005C: 22                    ret
                   
                   ; >> void print_hex_32(long r0r1r2r3) <<
                   
                   ; Print hexadecimal number from r0-r3.
                   
                   print_hex_32:
005D: C0 E0                 push    ACC
005F: EB                    mov     a,      r3      ; MSB first
0060: 11 3D                 acall   print_hex_8
0062: EA                    mov     a,      r2
0063: 11 3D                 acall   print_hex_8
0065: E9                    mov     a,      r1
0066: 11 3D                 acall   print_hex_8
0068: E8                    mov     a,      r0      ; LSB last
0069: 11 3D                 acall   print_hex_8
006B: D0 E0                 pop     ACC
006D: 22                    ret
006E:              .equ     panic_out,serial_tx
                   
                   ; *** panic/panic.inc ***
                   
                   ; >> void panic() <<
                   
                   ; Unrecoverable error handler.
                   ; Print caller address and halt.
                   
                   panic:
006E: C2 AF                 clr     ea      ; disable interrupts
0070: 90 00 1A              mov     dptr,   #panic_out
0073: 85 82 32              mov     out,    dpl
0076: 85 83 33              mov     out+1,  dph
0079: 90 00 88              mov     dptr,   #panic_text
007C: 11 27                 acall   print_text
007E: D0 E0                 pop     acc
0080: 11 3D                 acall   print_hex_8
0082: D0 E0                 pop     acc
0084: 11 3D                 acall   print_hex_8
0086: 80 FE                 sjmp    *
                   
                   panic_text:
0088: 0D 0A                 .db     13, 10
008A: 20 21 21 21 
      20 70 61 6E 
      69 63 20 40 
                            .db     " !!! panic @"
0096: 00                    .db     0
