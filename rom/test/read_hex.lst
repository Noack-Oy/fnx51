                   
                   ; ************************************
                   ; * Hex Integer Parsing Test Program *
                   ; ************************************
                   
                   ; Parses and prints back hex numbers in a loop.
                   
                   
                   ; **********************
                   ; * Header Definitions *
                   ; **********************
                   
                   ; *** global/variables.equ ***
                   
                   ; variables in internal ram
                   
0000:              .equ     in,     0x30    ; pointer to input code
0000:              .equ     out,    0x32    ; pointer to ouput code
                   
0000:              .equ     stream_in,      0x34    ; input stream position
0000:              .equ     stream_out,     0x36    ; output stream position
                   
0000:              .equ     memory_list,    0x38    ; pointer to heap list head
0000:              .equ     memory_start,   0x40    ; first allocatable address
0000:              .equ     memory_end,     0x42    ; last allocatable address
                   
0000:              .equ     stack,  0x50    ; beginning of stack
                   
                   ; *** serial/sfr.equ ***
                   
                   ; Special function registers for serial interface.
                   ; See chapter 14 of AT89C51ED2 datasheet, page 48ff.
                   
                   ; Internal Baud Rate Generator (BRG), see datasheet page 52.
0000:                       .equ    BRL,    0x9A    ; baud rate reload value
0000:                       .equ    BDRCON, 0x9B    ; BRG control register
                   
                   
                   ; *************
                   ; * Main Code *
                   ; *************
                   
0000:              .org 0
                   
                   ; *** global/init.inc ***
                   
                   ; Initialize stack pointer and global variables.
                   ; This must be included early in the main program.
                   
0000: 75 81 50              mov     SP,     #STACK
                   
0003: 90 00 2F              mov     dptr,   #serial_rx
0006: 85 82 30              mov     IN,     DPL
0009: 85 83 31              mov     IN+1,   DPH
                   
000C: 90 00 27              mov     dptr,   #serial_tx
000F: 85 82 32              mov     OUT,    DPL
0012: 85 83 33              mov     OUT+1,  DPH
                   
                   ; *** test/read_int_hex.asm ***
                   
0015: 11 1D                 acall   serial_init
                   
                   loop:
0017: 11 3C                 acall   read_hex_32
0019: 11 C0                 acall   print_hex_32
001B: 80 FA                 sjmp    loop
                   
                   
                   ; *********************
                   ; * Library Functions *
                   ; *********************
                   
                   ; *** serial/init.inc ***
                   
                   ; >> void serial_init() <<
                   
                   ; Initialize serial interface.
                   ; - assumes 20MHz clock and X2 mode
                   ; - uses internal baud rate generator
                   ; - speed: 9600 bits per second
                   ; Formula: BRL = 256 - (F_clk / (32 * Baud_Rate))
                   ; ---
                   ; See datasheet page 52 for details,
                   ; also note oscillator diagram on page 16!
                   
                   serial_init:
001D: 75 98 52              mov     SCON,   #0x52   ; SM1, REN, TI
0020: 75 9A BF              mov     BRL,    #191    ; 9600 @20MHz CLK
0023: 75 9B 1E              mov     BDRCON, #0x1e   ; BRR, RBCK, TBCK, SPD
0026: 22                    ret
                   
                   ; *** serial/tx.inc ***
                   
                   ; >> void serial_tx(char a) <<
                   
                   ; Transmit byte from accumulator.
                   
                   serial_tx:
0027: 30 99 FD              jnb     TI,     serial_tx
002A: C2 99                 clr     TI
002C: F5 99                 mov     SBUF,   a
002E: 22                    ret
                   
                   ; *** serial/rx.inc ***
                   
                   ; >> char serial_rx <<
                   
                   ; Receive byte into accumulator.
                   
                   serial_rx:
002F: 30 98 FD              jnb     RI,     serial_rx
0032: C2 98                 clr     RI
0034: E5 99                 mov     a,      SBUF
0036: 22                    ret
                   
                   ; *** read/char.inc ***
                   
                   ; >> char read_char() <<
                   
                   ; Read char into accumulator.
                   ; Indirect call to function behind IN pointer.
                   
                   read_char:
0037: C0 30                 push    IN
0039: C0 31                 push    IN+1
003B: 22                    ret
                   
                   ; *** read/char.inc ***
                   
                   ; >> uint32 read_hex_32() <<
                   
                   ; Read 32 bit hex integer from input into r0-r3.
                   ; Stops at the first non-hex character or integer overflow.
                   
                   read_hex_32:
003C: C0 E0                 push    acc
003E: EC                    mov     a,      r4
003F: C0 E0                 push    acc
0041: ED                    mov     a,      r5
0042: C0 E0                 push    acc
                   
0044: E4                    clr     a
0045: F8                    mov     r0,     a
0046: F9                    mov     r1,     a
0047: FA                    mov     r2,     a
0048: FB                    mov     r3,     a
                   
                   read_hex_32__loop:
0049: 11 37                 acall   read_char
                   
004B: C3                    clr     c
004C: 94 30                 subb    a,      #0x30   ; ascii '0'
004E: 40 42                 jc      read_hex_32__end
0050: B4 0A 00              cjne    a,      #10,    read_hex_32__1
                   read_hex_32__1:
0053: 40 0D                 jc      read_hex_32__3
0055: 94 11                 subb    a,      #17     ; chars between '0' and 'A'
0057: 40 39                 jc      read_hex_32__end
0059: 24 0A                 add     a,      #10
005B: 54 DF                 anl     a,      #0xdf   ; allow lowercase
005D: B4 10 00              cjne    a,      #0x10,  read_hex_32__2
                   read_hex_32__2:
0060: 50 30                 jnc     read_hex_32__end
                   
                   read_hex_32__3:
0062: FC                    mov     r4,     a
0063: E8                    mov     a,      r0
0064: C4                    swap    a
0065: FD                    mov     r5,     a
0066: 54 F0                 anl     a,      #0xf0
0068: 4C                    orl     a,      r4
0069: F8                    mov     r0,     a
006A: ED                    mov     a,      r5
006B: 54 0F                 anl     a,      #0x0f
                   
006D: FC                    mov     r4,     a
006E: E9                    mov     a,      r1
006F: C4                    swap    a
0070: FD                    mov     r5,     a
0071: 54 F0                 anl     a,      #0xf0
0073: 4C                    orl     a,      r4
0074: F9                    mov     r1,     a
0075: ED                    mov     a,      r5
0076: 54 0F                 anl     a,      #0x0f
                   
0078: FC                    mov     r4,     a
0079: EA                    mov     a,      r2
007A: C4                    swap    a
007B: FD                    mov     r5,     a
007C: 54 F0                 anl     a,      #0xf0
007E: 4C                    orl     a,      r4
007F: FA                    mov     r2,     a
0080: ED                    mov     a,      r5
0081: 54 0F                 anl     a,      #0x0f
                   
0083: FC                    mov     r4,     a
0084: EB                    mov     a,      r3
0085: C4                    swap    a
0086: FD                    mov     r5,     a
0087: 54 F0                 anl     a,      #0xf0
0089: 4C                    orl     a,      r4
008A: FB                    mov     r3,     a
008B: ED                    mov     a,      r5
008C: 54 0F                 anl     a,      #0x0f
                   
008E: 70 02                 jnz     read_hex_32__end        ; overflow
0090: 80 B7                 sjmp    read_hex_32__loop
                   
                   
                   read_hex_32__end:
0092: D0 E0                 pop     acc
0094: FD                    mov     r5,     a
0095: D0 E0                 pop     acc
0097: FC                    mov     r4,     a
0098: D0 E0                 pop     acc
009A: 22                    ret
                   
                   ; *** print/char.inc ***
                   
                   ; >> void print_char(char a) <<
                   
                   ; Print char from accumulator.
                   ; Indirect call to function behind OUT pointer.
                   
                   print_char:
009B: C0 32                 push    OUT
009D: C0 33                 push    OUT+1
009F: 22                    ret
                   
                   ; *** print/hex.inc ***
                   
                   ; >> void print_hex_8(char a) <<
                   
                   ; Print hexadecimal number from accumulator.
                   
                   print_hex_8:
00A0: C4                    swap    a       ; high nibble first
00A1: 11 A4                 acall   print_hex_8__nibble
00A3: C4                    swap    a
                   print_hex_8__nibble:
00A4: C0 E0                 push    ACC
00A6: 54 0F                 anl     a,      #0x0f
00A8: 24 90                 add     a,      #0x90
00AA: D4                    da      a
00AB: 34 40                 addc    a,      #0x40
00AD: D4                    da      a
00AE: 44 20                 orl     a,      #0x20   ; lower case
00B0: 11 9B                 acall   print_char
00B2: D0 E0                 pop     ACC
00B4: 22                    ret
                   
                   ; >> void print_hex_16(int r0r1) <<
                   
                   ; Print hexadecimal number from r0-r1.
                   
                   print_hex_16:
00B5: C0 E0                 push    ACC
00B7: E9                    mov     a,      r1      ; MSB first
00B8: 11 A0                 acall   print_hex_8
00BA: E8                    mov     a,      r0      ; LSB second
00BB: 11 A0                 acall   print_hex_8
00BD: D0 E0                 pop     ACC
00BF: 22                    ret
                   
                   ; >> void print_hex_32(long r0r1r2r3) <<
                   
                   ; Print hexadecimal number from r0-r3.
                   
                   print_hex_32:
00C0: C0 E0                 push    ACC
00C2: EB                    mov     a,      r3      ; MSB first
00C3: 11 A0                 acall   print_hex_8
00C5: EA                    mov     a,      r2
00C6: 11 A0                 acall   print_hex_8
00C8: E9                    mov     a,      r1
00C9: 11 A0                 acall   print_hex_8
00CB: E8                    mov     a,      r0      ; LSB last
00CC: 11 A0                 acall   print_hex_8
00CE: D0 E0                 pop     ACC
00D0: 22                    ret
