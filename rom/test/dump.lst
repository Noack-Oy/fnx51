                   
                   ; ************************
                   ; * Hexdump Test Program *
                   ; ************************
                   
                   ; This program reads 37 bytes and
                   ; echoes them in hexdump format
                   
                   
                   ; **********************
                   ; * Header Definitions *
                   ; **********************
                   
                   ; *** global/variables.equ ***
                   
                   ; variables in internal ram
                   
0000:              .equ    in,     0x30    ; pointer to input code
0000:              .equ    out,    0x32    ; pointer to ouput code
                   
0000:              .equ    stream_in,      0x34    ; input stream position
0000:              .equ    stream_out,     0x36    ; output stream position
                   
0000:              .equ    memory_list,    0x38    ; pointer to heap list head
0000:              .equ    memory_start,   0x40    ; first allocatable address
0000:              .equ    memory_end,     0x42    ; last allocatable address
                   
0000:              .equ    stack,  0x50    ; beginning of stack
                   
                   ; *** serial/sfr.equ ***
                   
                   ; Special function registers for serial interface.
                   ; See chapter 14 of AT89C51ED2 datasheet, page 48ff.
                   
                   ; Internal Baud Rate Generator (BRG), see datasheet page 52.
0000:                      .equ    BRL,    0x9A    ; baud rate reload value
0000:                      .equ    BDRCON, 0x9B    ; BRG control register
                   
                   
                   ; *************
                   ; * Main Code *
                   ; *************
                   
0000:              .org 0
                   
                   ; *** global/init.inc ***
                   
                   ; Initialize stack pointer and global variables.
                   ; This must be included early in the main program.
                   
0000: 75 81 50             mov     SP,     #STACK
                   
0003: 90 00 36             mov     dptr,   #serial_rx
0006: 85 82 30             mov     IN,     DPL
0009: 85 83 31             mov     IN+1,   DPH
                   
000C: 90 00 3E             mov     dptr,   #serial_tx
000F: 85 82 32             mov     OUT,    DPL
0012: 85 83 33             mov     OUT+1,  DPH
                   
                   ; *** test/dump.asm ***
                   
0015: 11 2C                acall   serial_init
                   
0017: E4                   clr     a
0018: F8                   mov     r0,     a
0019: F9                   mov     r1,     a
001A: FA                   mov     r2,     a
001B: FB                   mov     r3,     a
001C: 74 25                mov     a,      #37
                   
001E: 11 81                acall   dump
0020: 11 6B                acall   print_hex_32
0022: 74 0D                mov     a,      #13
0024: 11 46                acall   print_char
0026: 74 0A                mov     a,      #10
0028: 11 46                acall   print_char
                   
002A: 80 FE                sjmp    *
                   
                   
                   ; *********************
                   ; * Library Functions *
                   ; *********************
                   
                   ; *** serial/init.inc ***
                   
                   ; >> void serial_init() <<
                   
                   ; Initialize serial interface.
                   ; - assumes 20MHz clock and X2 mode
                   ; - uses internal baud rate generator
                   ; - speed: 9600 bits per second
                   ; Formula: BRL = 256 - (F_clk / (32 * Baud_Rate))
                   ; ---
                   ; See datasheet page 52 for details,
                   ; also note oscillator diagram on page 16!
                   
                   serial_init:
002C: 75 98 52             mov     SCON,   #0x52   ; SM1, REN, TI
002F: 75 9A BF             mov     BRL,    #191    ; 9600 @20MHz CLK
0032: 75 9B 1E             mov     BDRCON, #0x1e   ; BRR, RBCK, TBCK, SPD
0035: 22                   ret
                   
                   ; *** serial/rx.inc ***
                   
                   ; >> char serial_rx <<
                   
                   ; Receive byte into accumulator.
                   
                   serial_rx:
0036: 30 98 FD             jnb     RI,     serial_rx
0039: C2 98                clr     RI
003B: E5 99                mov     a,      SBUF
003D: 22                   ret
                   
                   ; *** serial/tx.inc ***
                   
                   ; >> void serial_tx(char a) <<
                   
                   ; Transmit byte from accumulator.
                   
                   serial_tx:
003E: 30 99 FD             jnb     TI,     serial_tx
0041: C2 99                clr     TI
0043: F5 99                mov     SBUF,   a
0045: 22                   ret
                   
                   ; *** print/char.inc ***
                   
                   ; >> void print_char(char a) <<
                   
                   ; Print char from accumulator.
                   ; Indirect call to function behind OUT pointer.
                   
                   print_char:
0046: C0 32                push    OUT
0048: C0 33                push    OUT+1
004A: 22                   ret
                   
                   ; *** print/hex.inc ***
                   
                   ; >> void print_hex_8(char a) <<
                   
                   ; Print hexadecimal number from accumulator.
                   
                   print_hex_8:
004B: C4                   swap    a       ; high nibble first
004C: 11 4F                acall   print_hex_8__nibble
004E: C4                   swap    a
                   print_hex_8__nibble:
004F: C0 E0                push    ACC
0051: 54 0F                anl     a,      #0x0f
0053: 24 90                add     a,      #0x90
0055: D4                   da      a
0056: 34 40                addc    a,      #0x40
0058: D4                   da      a
0059: 44 20                orl     a,      #0x20   ; lower case
005B: 11 46                acall   print_char
005D: D0 E0                pop     ACC
005F: 22                   ret
                   
                   ; >> void print_hex_16(int r0r1) <<
                   
                   ; Print hexadecimal number from r0-r1.
                   
                   print_hex_16:
0060: C0 E0                push    ACC
0062: E9                   mov     a,      r1      ; MSB first
0063: 11 4B                acall   print_hex_8
0065: E8                   mov     a,      r0      ; LSB second
0066: 11 4B                acall   print_hex_8
0068: D0 E0                pop     ACC
006A: 22                   ret
                   
                   ; >> void print_hex_32(long r0r1r2r3) <<
                   
                   ; Print hexadecimal number from r0-r3.
                   
                   print_hex_32:
006B: C0 E0                push    ACC
006D: EB                   mov     a,      r3      ; MSB first
006E: 11 4B                acall   print_hex_8
0070: EA                   mov     a,      r2
0071: 11 4B                acall   print_hex_8
0073: E9                   mov     a,      r1
0074: 11 4B                acall   print_hex_8
0076: E8                   mov     a,      r0      ; LSB last
0077: 11 4B                acall   print_hex_8
0079: D0 E0                pop     ACC
007B: 22                   ret
                   
                   ; *** read/char.inc ***
                   
                   ; >> char read_char() <<
                   
                   ; Read char into accumulator.
                   ; Indirect call to function behind IN pointer.
                   
                   read_char:
007C: C0 30                push    IN
007E: C0 31                push    IN+1
0080: 22                   ret
                   
                   ; *** util/dump.inc ***
                   
                   ; >> uint32{r0-r3} dump(uint32{r0-r3} addr, uint8{a} count) 
                   
                   ; Print hexdump from standard input to standard output.
                   ; Starting value for address column in r0-r3.
                   ; Number of bytes to print in a (0 means 256).
                   ; r0-r3 contains next address upon exit.
                   
                   dump:
0081: C0 F0                push    b
0083: C0 E0                push    acc
0085: F5 F0                mov     b,      a
0087: EC                   mov     a,      r4
0088: C0 E0                push    acc
008A: ED                   mov     a,      r5
008B: C0 E0                push    acc
008D: EE                   mov     a,      r6
008E: C0 E0                push    acc
0090: EF                   mov     a,      r7
0091: C0 E0                push    acc
                   
                           ; b: total bytes remaining
                           ; r0: buffer pointer
                           ; r1: read loop counter / padding size
                           ; r2: print loop counter
                   
                           ; r4-7: address label
0093: 31 3D                acall   xch_r0123_r4567
                   
                           ; allocate 16 byte array on stack
0095: E5 81                mov     a,      sp
0097: F8                   mov     r0,     a
0098: 24 10                add     a,      #16
009A: F5 81                mov     sp,     a
                   
                   dump__line_loop:
                           ; read into buffer
009C: 79 10                mov     r1,     #16
                   dump__read_loop:
009E: 11 7C                acall   read_char
00A0: 08                   inc     r0
00A1: F6                   mov     @r0,    a
00A2: D5 F0 03             djnz    b,      dump__read_continue
00A5: 19                   dec     r1
00A6: 80 02                sjmp    dump__read_end
                   dump__read_continue:
00A8: D9 F4                djnz    r1,     dump__read_loop
                   dump__read_end:
                   
                           ; print address column
00AA: 31 3D                acall   xch_r0123_r4567
00AC: 11 6B                acall   print_hex_32
00AE: 31 3D                acall   xch_r0123_r4567
00B0: 74 3A                mov     a,      #':'
00B2: 11 46                acall   print_char
                   
                           ; if r1 is nonzero here, we have a shorter line
                           ; the value in r1 is the number of padding bytes
                   
                           ; wind back pointer
00B4: E8                   mov     a,      r0
00B5: 24 F0                add     a,      #-16
00B7: 29                   add     a,      r1
00B8: F8                   mov     r0,     a
                   
                           ; print hex
00B9: 7A 10                mov     r2,     #16
                   dump__print_hex_loop:
00BB: 08                   inc     r0
00BC: EA                   mov     a,      r2
00BD: 54 03                anl     a,      #3      ; mod 4
00BF: 70 04                jnz     dump__print_hex_no_gap
00C1: 74 20                mov     a,      #' ' ; gap after every 4 bytes
00C3: 11 46                acall   print_char
                   dump__print_hex_no_gap:
00C5: EA                   mov     a,      r2
00C6: D3                   setb    c
00C7: 99                   subb    a,      r1
00C8: 50 08                jnc     dump__print_hex_no_padding
00CA: 74 20                mov     a,      #' ' ; padding for shorter line
00CC: 11 46                acall   print_char
00CE: 11 46                acall   print_char
00D0: 80 03                sjmp    dump__print_hex_next
                   dump__print_hex_no_padding:
00D2: E6                   mov     a,      @r0
00D3: 11 4B                acall   print_hex_8
                   dump__print_hex_next:
00D5: 74 20                mov     a,      #' ' ; space between bytes
00D7: 11 46                acall   print_char
00D9: DA E0                djnz    r2,     dump__print_hex_loop
                   
                           ; wind back again
00DB: E8                   mov     a,      r0
00DC: 24 F0                add     a,      #-16
00DE: F8                   mov     r0,     a
                   
                           ; print ascii
00DF: 74 20                mov     a,      #' '
00E1: 11 46                acall   print_char
00E3: 74 7C                mov     a,      #'|'
00E5: 11 46                acall   print_char
00E7: 74 10                mov     a,      #16
00E9: C3                   clr     c
00EA: 99                   subb    a,      r1
00EB: F9                   mov     r1,     a ; number of bytes to print
00EC: FA                   mov     r2,     a
                   dump__print_ascii_loop:
00ED: 08                   inc     r0
00EE: E6                   mov     a,      @r0
00EF: B4 20 00             cjne    a,      #0x20,  dump__print_ascii_check1
                   dump__print_ascii_check1:
00F2: 40 05                jc      dump__print_ascii_replace
00F4: B4 7F 00             cjne    a,      #0x7f,  dump__print_ascii_check2
                   dump__print_ascii_check2:
00F7: 40 02                jc      dump__print_ascii_continue
                   dump__print_ascii_replace:
00F9: 74 2E                mov     a,      #'.'
                   dump__print_ascii_continue:
00FB: 11 46                acall   print_char
00FD: DA EE                djnz    r2,     dump__print_ascii_loop
00FF: 74 7C                mov     a,      #'|'
0101: 11 46                acall   print_char
0103: 74 0D                mov     a,      #13
0105: 11 46                acall   print_char
0107: 74 0A                mov     a,      #10
0109: 11 46                acall   print_char
                   
                           ; wind back again
010B: E8                   mov     a,      r0
010C: 24 F0                add     a,      #-16
010E: F8                   mov     r0,     a
                   
                           ; next address
010F: EC                   mov     a,      r4
0110: 29                   add     a,      r1
0111: FC                   mov     r4,     a
0112: ED                   mov     a,      r5
0113: 34 00                addc    a,      #0
0115: FD                   mov     r5,     a
0116: EE                   mov     a,      r6
0117: 34 00                addc    a,      #0
0119: FE                   mov     r6,     a
011A: EF                   mov     a,      r7
011B: 34 00                addc    a,      #0
011D: FF                   mov     r7,     a
                   
011E: E5 F0                mov     a,      b
0120: 60 02                jz      dump__end
0122: 01 9C                ajmp    dump__line_loop
                   
                   dump__end:
                           ; deallocate array from stack
0124: E5 81                mov     a,      sp
0126: 24 F0                add     a,      #-16
0128: F5 81                mov     sp,     a
                   
012A: 31 3D                acall   xch_r0123_r4567
                   
012C: D0 E0                pop     acc
012E: FF                   mov     r7,     a
012F: D0 E0                pop     acc
0131: FE                   mov     r6,     a
0132: D0 E0                pop     acc
0134: FD                   mov     r5,     a
0135: D0 E0                pop     acc
0137: FC                   mov     r4,     a
0138: D0 E0                pop     acc
013A: D0 F0                pop     b
013C: 22                   ret
                   
                   ; *** util/xch.inc ***
                   
                   ; >> void xch_r0123_r4567(uint32 &r0r1r2r3, uint32 &r4r5r6r7
                   
                   ; Exchange registers r0-r3 with r4-r7.
                   
                   xch_r0123_r4567:
                           ; r0 <-> r4
013D: C8                   xch     a,      r0
013E: CC                   xch     a,      r4
013F: C8                   xch     a,      r0
                           ; r1 <-> r5
0140: C9                   xch     a,      r1
0141: CD                   xch     a,      r5
0142: C9                   xch     a,      r1
                           ; r2 <-> r6
0143: CA                   xch     a,      r2
0144: CE                   xch     a,      r6
0145: CA                   xch     a,      r2
                           ; r3 <-> r7
0146: CB                   xch     a,      r3
0147: CF                   xch     a,      r7
0148: CB                   xch     a,      r3
                           ; a remains unchanged
0149: 22                   ret
