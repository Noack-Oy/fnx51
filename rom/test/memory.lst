                   
                   ; ************************************
                   ; * Memory Management Test Program *
                   ; ************************************
                   
                   ; Interactive test:
                   ; d <addr> <size>;       - dump memory
                   ; g <size>;              - getmem
                   ; f <addr> <size>;       - freemem
                   
                   
                   ; **********************
                   ; * Header Definitions *
                   ; **********************
                   
                   ; *** global/variables.equ ***
                   
                            ; variables in internal ram
                   
0000:                       .equ    in,     0x30    ; pointer to input code
0000:                       .equ    out,    0x32    ; pointer to ouput code
                   
0000:                       .equ    stream_in,      0x34    ; input stream posi
0000:                       .equ    stream_out,     0x36    ; output stream pos
                   
0000:                       .equ    stack,  0x40    ; beginning of stack
                   
                   ; *** global/sfr.equ ***
                   
                   ; global SFRs
                   
0000:              .equ     auxr,   0x8e    ; auxiliary register
                   
                   ; *** serial/sfr.equ ***
                   
                   ; Special function registers for serial interface.
                   ; See chapter 14 of AT89C51ED2 datasheet, page 48ff.
                   
                   ; Internal Baud Rate Generator (BRG), see datasheet page 52.
0000:                       .equ    BRL,    0x9A    ; baud rate reload value
0000:                       .equ    BDRCON, 0x9B    ; BRG control register
                   
                   
                   ; *************
                   ; * Main Code *
                   ; *************
                   
0000:              .org 0
                   
                   ; *** global/init.inc ***
                   
                   ; Initialize stack pointer and global variables.
                   ; This must be included early in the main program.
                   
0000: 75 81 40              mov     SP,     #STACK
                   
0003: 90 00 71              mov     dptr,   #serial_rx
0006: 85 82 30              mov     IN,     DPL
0009: 85 83 31              mov     IN+1,   DPH
                   
000C: 90 00 69              mov     dptr,   #serial_tx
000F: 85 82 32              mov     OUT,    DPL
0012: 85 83 33              mov     OUT+1,  DPH
                   
                   ; *** test/memory.asm ***
                   
0015: 11 5F                 acall   serial_init
                   
                            ; use xram
0017: E5 8E                 mov     a,      auxr
0019: 55 E1                 anl     a,      0xe1    ; clear extram, xrs0-2
001B: 45 10                 orl     a,      0x10    ; set xrs2 (size 1792 bytes
001D: F5 8E                 mov     auxr,   a
                   
                   
                   loop:
001F: 11 79                 acall   read_char
                   
0021: B4 64 15              cjne    a,      #'d',   __1
0024: 11 7E                 acall   read_hex_32
0026: 88 34                 mov     stream_in,      r0
0028: 89 35                 mov     stream_in+1,    r1
002A: 11 7E                 acall   read_hex_32
002C: E8                    mov     a,      r0
002D: A8 34                 mov     r0,     stream_in
002F: A9 35                 mov     r1,     stream_in+1
0031: 7A 00                 mov     r2,     #0
0033: 7B 00                 mov     r3,     #0
0035: 31 62                 acall   dump
0037: 80 E6                 sjmp    loop
                   __1:
0039: B4 67 08              cjne    a,      #'g',   __2
003C: 11 7E                 acall   read_hex_32
003E: 51 1E                 acall   getmem
0040: 31 18                 acall   print_hex_32
0042: 80 DB                 sjmp    loop
                   __2:
0044: B4 66 12              cjne    a,      #'f',   __3
0047: 11 7E                 acall   read_hex_32
0049: E8                    mov     a,      r0
004A: FC                    mov     r4,     a
004B: E9                    mov     a,      r1
004C: FD                    mov     r5,     a
004D: 11 7E                 acall   read_hex_32
004F: E8                    mov     a,      r0
0050: FA                    mov     r2,     a
0051: E9                    mov     a,      r1
0052: FB                    mov     r3,     a
0053: EC                    mov     a,      r4
0054: F8                    mov     r0,     a
0055: ED                    mov     a,      r5
0056: F9                    mov     r1,     a
0057: 51 25                 acall   freemem
                   __3:
0059: 74 3F                 mov     a,      #'?'
005B: 11 DD                 acall   print_char
005D: 80 C0                 sjmp    loop
                   
                   
                   ; *********************
                   ; * Library Functions *
                   ; *********************
                   
                   ; *** serial/init.inc ***
                   
                   ; >> void serial_init() <<
                   
                   ; Initialize serial interface.
                   ; - assumes 20MHz clock and X2 mode
                   ; - uses internal baud rate generator
                   ; - speed: 9600 bits per second
                   ; Formula: BRL = 256 - (F_clk / (32 * Baud_Rate))
                   ; ---
                   ; See datasheet page 52 for details,
                   ; also note oscillator diagram on page 16!
                   
                   serial_init:
005F: 75 98 52              mov     SCON,   #0x52   ; SM1, REN, TI
0062: 75 9A BF              mov     BRL,    #191    ; 9600 @20MHz CLK
0065: 75 9B 1E              mov     BDRCON, #0x1e   ; BRR, RBCK, TBCK, SPD
0068: 22                    ret
                   
                   ; *** serial/tx.inc ***
                   
                   ; >> void serial_tx(char a) <<
                   
                   ; Transmit byte from accumulator.
                   
                   serial_tx:
0069: 30 99 FD              jnb     TI,     serial_tx
006C: C2 99                 clr     TI
006E: F5 99                 mov     SBUF,   a
0070: 22                    ret
                   
                   ; *** serial/rx.inc ***
                   
                   ; >> char serial_rx <<
                   
                   ; Receive byte into accumulator.
                   
                   serial_rx:
0071: 30 98 FD              jnb     RI,     serial_rx
0074: C2 98                 clr     RI
0076: E5 99                 mov     a,      SBUF
0078: 22                    ret
                   
                   ; *** read/char.inc ***
                   
                   ; >> char read_char() <<
                   
                   ; Read char into accumulator.
                   ; Indirect call to function behind IN pointer.
                   
                   read_char:
0079: C0 30                 push    IN
007B: C0 31                 push    IN+1
007D: 22                    ret
                   
                   ; *** read/char.inc ***
                   
                   ; >> int32_t read_hex_32() <<
                   
                   ; Read 32 bit hex integer from input into r0-r3.
                   ; Stops at the first non-hex character or integer overflow.
                   
                   read_hex_32:
007E: C0 E0                 push    acc
0080: EC                    mov     a,      r4
0081: C0 E0                 push    acc
0083: ED                    mov     a,      r5
0084: C0 E0                 push    acc
                   
0086: E4                    clr     a
0087: F8                    mov     r0,     a
0088: F9                    mov     r1,     a
0089: FA                    mov     r2,     a
008A: FB                    mov     r3,     a
                   
                   read_hex_32__loop:
008B: 11 79                 acall   read_char
                   
008D: C3                    clr     c
008E: 94 30                 subb    a,      #0x30   ; ascii '0'
0090: 40 42                 jc      read_hex_32__end
0092: B4 0A 00              cjne    a,      #10,    read_hex_32__1
                   read_hex_32__1:
0095: 40 0D                 jc      read_hex_32__3
0097: 94 11                 subb    a,      #17     ; chars between '0' and 'A'
0099: 40 39                 jc      read_hex_32__end
009B: 24 0A                 add     a,      #10
009D: 54 DF                 anl     a,      #0xdf   ; allow lowercase
009F: B4 10 00              cjne    a,      #0x10,  read_hex_32__2
                   read_hex_32__2:
00A2: 50 30                 jnc     read_hex_32__end
                   
                   read_hex_32__3:
00A4: FC                    mov     r4,     a
00A5: E8                    mov     a,      r0
00A6: C4                    swap    a
00A7: FD                    mov     r5,     a
00A8: 54 F0                 anl     a,      #0xf0
00AA: 4C                    orl     a,      r4
00AB: F8                    mov     r0,     a
00AC: ED                    mov     a,      r5
00AD: 54 0F                 anl     a,      #0x0f
                   
00AF: FC                    mov     r4,     a
00B0: E9                    mov     a,      r1
00B1: C4                    swap    a
00B2: FD                    mov     r5,     a
00B3: 54 F0                 anl     a,      #0xf0
00B5: 4C                    orl     a,      r4
00B6: F9                    mov     r1,     a
00B7: ED                    mov     a,      r5
00B8: 54 0F                 anl     a,      #0x0f
                   
00BA: FC                    mov     r4,     a
00BB: EA                    mov     a,      r2
00BC: C4                    swap    a
00BD: FD                    mov     r5,     a
00BE: 54 F0                 anl     a,      #0xf0
00C0: 4C                    orl     a,      r4
00C1: FA                    mov     r2,     a
00C2: ED                    mov     a,      r5
00C3: 54 0F                 anl     a,      #0x0f
                   
00C5: FC                    mov     r4,     a
00C6: EB                    mov     a,      r3
00C7: C4                    swap    a
00C8: FD                    mov     r5,     a
00C9: 54 F0                 anl     a,      #0xf0
00CB: 4C                    orl     a,      r4
00CC: FB                    mov     r3,     a
00CD: ED                    mov     a,      r5
00CE: 54 0F                 anl     a,      #0x0f
                   
00D0: 70 02                 jnz     read_hex_32__end        ; overflow
00D2: 80 B7                 sjmp    read_hex_32__loop
                   
                   
                   read_hex_32__end:
00D4: D0 E0                 pop     acc
00D6: FD                    mov     r5,     a
00D7: D0 E0                 pop     acc
00D9: FC                    mov     r4,     a
00DA: D0 E0                 pop     acc
00DC: 22                    ret
                   
                   ; *** print/char.inc ***
                   
                   ; >> void print_char(char a) <<
                   
                   ; Print char from accumulator.
                   ; Indirect call to function behind OUT pointer.
                   
                   print_char:
00DD: C0 32                 push    OUT
00DF: C0 33                 push    OUT+1
00E1: 22                    ret
                   
                   ; *** print/text.inc ***
                   
                   ; >> void print_text(char* dptr) <<
                   
                   ; Print null-terminated string from program code.
                   ; Aborts if no null terminator is found after 256 bytes.
                   
                   print_text:
00E2: C0 E0                 push    ACC
00E4: E8                    mov     a,      r0
00E5: C0 E0                 push    ACC
                   
00E7: E4                    clr     a
00E8: F8                    mov     r0,     a
                   print_text__loop:
00E9: 93                    movc    a,      @dptr+a
00EA: 60 06                 jz      print_text__end
00EC: 11 DD                 acall   print_char
00EE: 08                    inc     r0
00EF: E8                    mov     a,      r0
00F0: 70 F7                 jnz     print_text__loop
                   
                   print_text__end:
00F2: D0 E0                 pop     ACC
00F4: F8                    mov     r0,     a
00F5: D0 E0                 pop     ACC
00F7: 22                    ret
                   
                   ; *** print/hex.inc ***
                   
                   ; >> void print_hex_8(char a) <<
                   
                   ; Print hexadecimal number from accumulator.
                   
                   print_hex_8:
00F8: C4                    swap    a       ; high nibble first
00F9: 11 FC                 acall   print_hex_8__nibble
00FB: C4                    swap    a
                   print_hex_8__nibble:
00FC: C0 E0                 push    ACC
00FE: 54 0F                 anl     a,      #0x0f
0100: 24 90                 add     a,      #0x90
0102: D4                    da      a
0103: 34 40                 addc    a,      #0x40
0105: D4                    da      a
0106: 44 20                 orl     a,      #0x20   ; lower case
0108: 11 DD                 acall   print_char
010A: D0 E0                 pop     ACC
010C: 22                    ret
                   
                   ; >> void print_hex_16(int r0r1) <<
                   
                   ; Print hexadecimal number from r0-r1.
                   
                   print_hex_16:
010D: C0 E0                 push    ACC
010F: E9                    mov     a,      r1      ; MSB first
0110: 11 F8                 acall   print_hex_8
0112: E8                    mov     a,      r0      ; LSB second
0113: 11 F8                 acall   print_hex_8
0115: D0 E0                 pop     ACC
0117: 22                    ret
                   
                   ; >> void print_hex_32(long r0r1r2r3) <<
                   
                   ; Print hexadecimal number from r0-r3.
                   
                   print_hex_32:
0118: C0 E0                 push    ACC
011A: EB                    mov     a,      r3      ; MSB first
011B: 11 F8                 acall   print_hex_8
011D: EA                    mov     a,      r2
011E: 11 F8                 acall   print_hex_8
0120: E9                    mov     a,      r1
0121: 11 F8                 acall   print_hex_8
0123: E8                    mov     a,      r0      ; LSB last
0124: 11 F8                 acall   print_hex_8
0126: D0 E0                 pop     ACC
0128: 22                    ret
                   
                   ; *** util/xch.inc ***
                   
                   ; >> void xch_r0123_r4567(uint32 &r0r1r2r3, uint32 &r4r5r6r7
                   
                   ; Exchange registers r0-r3 with r4-r7.
                   
                   xch_r0123_r4567:
                            ; r0 <-> r4
0129: C8                    xch     a,      r0
012A: CC                    xch     a,      r4
012B: C8                    xch     a,      r0
                            ; r1 <-> r5
012C: C9                    xch     a,      r1
012D: CD                    xch     a,      r5
012E: C9                    xch     a,      r1
                            ; r2 <-> r6
012F: CA                    xch     a,      r2
0130: CE                    xch     a,      r6
0131: CA                    xch     a,      r2
                            ; r3 <-> r7
0132: CB                    xch     a,      r3
0133: CF                    xch     a,      r7
0134: CB                    xch     a,      r3
                            ; a remains unchanged
0135: 22                    ret
                   
                   ; *** util/regbank.inc ***
                   
                   ; >> void* regbank_next() <<
                   
                   ; Switch to next register bank.
                   ; Return pointer to r0 of old bank in new r0.
                   
                   regbank_next:
0136: C0 E0                 push    acc
                            ; check if already at highest bank
0138: E5 D0                 mov     a,      psw
013A: 54 18                 anl     a,      #0x18
013C: B4 18 02              cjne    a,      #0x18,  regbank_next__continue
013F: 51 2C                 acall   panic   ; overflow
                   regbank_next__continue:
                            ; switch to next bank
0141: E5 D0                 mov     a,      psw
0143: 24 08                 add     a,      #0x08
0145: F5 D0                 mov     psw,    a
                            ; calculate pointer to old bank
0147: 54 18                 anl     a,      #0x18
0149: 24 F8                 add     a,      #0xf8
014B: F8                    mov     r0,     a
                            ; done
014C: D0 E0                 pop     acc
014E: 22                    ret
                   
                   ; >> void regbank_prev() <<
                   
                   ; Switch to previous register bank.
                   
                   regbank_prev:
014F: C0 E0                 push    acc
                            ; check if already at lowest bank
0151: E5 D0                 mov     a,      psw
0153: 54 18                 anl     a,      #0x18
0155: 70 02                 jnz     regbank_prev__continue
0157: 51 2C                 acall   panic   ; underflow
                   regbank_prev__continue:
                            ; switch to previous bank
0159: E5 D0                 mov     a,      psw
015B: 24 F8                 add     a,      #0xf8
015D: F5 D0                 mov     psw,    a
                            ; done
015F: D0 E0                 pop     acc
0161: 22                    ret
                   
                   ; *** util/dump.inc ***
                   
                   ; >> void dump(uint32 &r0r1r2r3, uint8 a) <<
                   
                   ; Print hexdump from standard input to standard output.
                   ; Starting value for address column in r0-r3.
                   ; Number of bytes to print in a (0 means 256).
                   ; r0-r4 contains next address upon exit.
                   
                   dump:
0162: C0 F0                 push    b
0164: C0 E0                 push    acc
0166: F5 F0                 mov     b,      a
0168: EC                    mov     a,      r4
0169: C0 E0                 push    acc
016B: ED                    mov     a,      r5
016C: C0 E0                 push    acc
016E: EE                    mov     a,      r6
016F: C0 E0                 push    acc
0171: EF                    mov     a,      r7
0172: C0 E0                 push    acc
                   
                            ; b: total bytes remaining
                            ; r0: buffer pointer
                            ; r1: read loop counter / padding size
                            ; r2: print loop counter
                   
                            ; r4-7: address label
0174: 31 29                 acall   xch_r0123_r4567
                   
                            ; allocate 16 byte array on stack
0176: E5 81                 mov     a,      sp
0178: F8                    mov     r0,     a
0179: 24 10                 add     a,      #16
017B: F5 81                 mov     sp,     a
                   
                   dump__line_loop:
                            ; read into buffer
017D: 79 10                 mov     r1,     #16
                   dump__read_loop:
017F: 11 79                 acall   read_char
0181: 08                    inc     r0
0182: F6                    mov     @r0,    a
0183: D5 F0 03              djnz    b,      dump__read_continue
0186: 19                    dec     r1
0187: 80 02                 sjmp    dump__read_end
                   dump__read_continue:
0189: D9 F4                 djnz    r1,     dump__read_loop
                   dump__read_end:
                   
                            ; print address column
018B: 31 29                 acall   xch_r0123_r4567
018D: 31 18                 acall   print_hex_32
018F: 31 29                 acall   xch_r0123_r4567
0191: 74 3A                 mov     a,      #':'
0193: 11 DD                 acall   print_char
                   
                            ; if r1 is nonzero here, we have a shorter line
                            ; the value in r1 is the number of padding bytes
                   
                            ; wind back pointer
0195: E8                    mov     a,      r0
0196: 24 F0                 add     a,      #-16
0198: 29                    add     a,      r1
0199: F8                    mov     r0,     a
                   
                            ; print hex
019A: 7A 10                 mov     r2,     #16
                   dump__print_hex_loop:
019C: 08                    inc     r0
019D: EA                    mov     a,      r2
019E: 54 03                 anl     a,      #3      ; mod 4
01A0: 70 04                 jnz     dump__print_hex_no_gap
01A2: 74 20                 mov     a,      #' ' ; gap after every 4 bytes
01A4: 11 DD                 acall   print_char
                   dump__print_hex_no_gap:
01A6: EA                    mov     a,      r2
01A7: D3                    setb    c
01A8: 99                    subb    a,      r1
01A9: 50 08                 jnc     dump__print_hex_no_padding
01AB: 74 20                 mov     a,      #' ' ; padding for shorter line
01AD: 11 DD                 acall   print_char
01AF: 11 DD                 acall   print_char
01B1: 80 03                 sjmp    dump__print_hex_next
                   dump__print_hex_no_padding:
01B3: E6                    mov     a,      @r0
01B4: 11 F8                 acall   print_hex_8
                   dump__print_hex_next:
01B6: 74 20                 mov     a,      #' ' ; space between bytes
01B8: 11 DD                 acall   print_char
01BA: DA E0                 djnz    r2,     dump__print_hex_loop
                   
                            ; wind back again
01BC: E8                    mov     a,      r0
01BD: 24 F0                 add     a,      #-16
01BF: F8                    mov     r0,     a
                   
                            ; print ascii
01C0: 74 20                 mov     a,      #' '
01C2: 11 DD                 acall   print_char
01C4: 74 7C                 mov     a,      #'|'
01C6: 11 DD                 acall   print_char
01C8: 74 10                 mov     a,      #16
01CA: C3                    clr     c
01CB: 99                    subb    a,      r1
01CC: F9                    mov     r1,     a ; number of bytes to print
01CD: FA                    mov     r2,     a
                   dump__print_ascii_loop:
01CE: 08                    inc     r0
01CF: E6                    mov     a,      @r0
01D0: B4 20 00              cjne    a,      #0x20,  dump__print_ascii_check1
                   dump__print_ascii_check1:
01D3: 40 05                 jc      dump__print_ascii_replace
01D5: B4 7F 00              cjne    a,      #0x7f,  dump__print_ascii_check2
                   dump__print_ascii_check2:
01D8: 40 02                 jc      dump__print_ascii_continue
                   dump__print_ascii_replace:
01DA: 74 2E                 mov     a,      #'.'
                   dump__print_ascii_continue:
01DC: 11 DD                 acall   print_char
01DE: DA EE                 djnz    r2,     dump__print_ascii_loop
01E0: 74 7C                 mov     a,      #'|'
01E2: 11 DD                 acall   print_char
01E4: 74 0D                 mov     a,      #13
01E6: 11 DD                 acall   print_char
01E8: 74 0A                 mov     a,      #10
01EA: 11 DD                 acall   print_char
                   
                            ; wind back again
01EC: E8                    mov     a,      r0
01ED: 24 F0                 add     a,      #-16
01EF: F8                    mov     r0,     a
                   
                            ; next address
01F0: EC                    mov     a,      r4
01F1: 29                    add     a,      r1
01F2: FC                    mov     r4,     a
01F3: ED                    mov     a,      r5
01F4: 34 00                 addc    a,      #0
01F6: FD                    mov     r5,     a
01F7: EE                    mov     a,      r6
01F8: 34 00                 addc    a,      #0
01FA: FE                    mov     r6,     a
01FB: EF                    mov     a,      r7
01FC: 34 00                 addc    a,      #0
01FE: FF                    mov     r7,     a
                   
01FF: E5 F0                 mov     a,      b
0201: 60 02                 jz      dump__end
0203: 21 7D                 ajmp    dump__line_loop
                   
                   dump__end:
                            ; deallocate array from stack
0205: E5 81                 mov     a,      sp
0207: 24 F0                 add     a,      #-16
0209: F5 81                 mov     sp,     a
                   
020B: 31 29                 acall   xch_r0123_r4567
                   
020D: D0 E0                 pop     acc
020F: FF                    mov     r7,     a
0210: D0 E0                 pop     acc
0212: FE                    mov     r6,     a
0213: D0 E0                 pop     acc
0215: FD                    mov     r5,     a
0216: D0 E0                 pop     acc
0218: FC                    mov     r4,     a
0219: D0 E0                 pop     acc
021B: D0 F0                 pop     b
021D: 22                    ret
                   
                   ; *** memory/getmem.inc ***
                   
                   ; >> char *getmem(uint32 size) <<
                   
                   ; Allocate memory, return lowest address
                   
                   getmem:
021E: C0 A8                 push    ie
0220: C2 AF                 clr     ea
                            
0222: D0 A8                 pop     ie
0224: 22                    ret
                   
                   ; *** memory/getmem.inc ***
                   
                   ; >> void freemem(char *addr, uint32 size) <<
                   
                   ; Allocate memory, return lowest address
                   
                   freemem:
0225: C0 A8                 push    ie
0227: C2 AF                 clr     ea
                            
0229: D0 A8                 pop     ie
022B: 22                    ret
                   
022C:              .equ panic_out, serial_tx
                   
                   ; *** panic/panic.inc ***
                   
                   ; >> void panic() <<
                   
                   ; Unrecoverable error handler.
                   ; Print caller address and halt.
                   
                   panic:
022C: C2 AF                 clr     ea      ; disable interrupts
022E: 90 00 69              mov     dptr,   #panic_out
0231: 85 82 32              mov     out,    dpl
0234: 85 83 33              mov     out+1,  dph
0237: 90 02 46              mov     dptr,   #panic_text
023A: 11 E2                 acall   print_text
023C: D0 E0                 pop     acc
023E: 11 F8                 acall   print_hex_8
0240: D0 E0                 pop     acc
0242: 11 F8                 acall   print_hex_8
0244: 80 FE                 sjmp    *
                   
                   panic_text:
0246: 0D 0A                 .db     13, 10
0248: 20 21 21 21 
      20 70 61 6E 
      69 63 20 40 
                            .db     " !!! panic @"
0254: 00                    .db     0
