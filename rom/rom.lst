                   
                   ; *** headers ***
                   
                   
                   ; *** global/variables.equ ***
                   
                   ; variables in internal ram
                   
0000:              .equ     in,     0x30    ; pointer to input code
0000:              .equ     out,    0x32    ; pointer to ouput code
                   
0000:              .equ     stream_in,      0x34    ; input stream position
0000:              .equ     stream_out,     0x36    ; output stream position
                   
0000:              .equ     memory_list,    0x38    ; pointer to heap list head
0000:              .equ     memory_start,   0x40    ; first allocatable address
0000:              .equ     memory_end,     0x42    ; last allocatable address
                   
0000:              .equ     stack,  0x50    ; beginning of stack
                   
                   ; *** serial/sfr.equ ***
                   
                   ; Special function registers for serial interface.
                   ; See chapter 14 of AT89C51ED2 datasheet, page 48ff.
                   
                   ; Internal Baud Rate Generator (BRG), see datasheet page 52.
0000:                       .equ    BRL,    0x9A    ; baud rate reload value
0000:                       .equ    BDRCON, 0x9B    ; BRG control register
                   
                   ; *** spi/sfr.equ ***
                   
                   ; Special function registers for serial peripheral interface
                   ; See chapter 16 of AT89C51ED2 datasheet
                   
0000:              .equ     spcon,  0xc3    ; Serial Peripheral Control Registe
0000:              .equ     spsta,  0xc4    ; Serial Peripheral Status Register
0000:              .equ     spdat,  0xc5    ; Serial Peripheral Data Register
                   
                   ; *** interrupt vectors ***
                   
0000:              .org 0x0000
0000: 80 4E                 sjmp    main
0050:              .org 0x0050
                   
                   ; *** main program ***
                   
                   main:
                   
                   
                   ; *** global/init.inc ***
                   
                   ; Initialize stack pointer and global variables.
                   ; This must be included early in the main program.
                   
0050: 75 81 50              mov     SP,     #STACK
                   
0053: 90 01 C1              mov     dptr,   #serial_rx
0056: 85 82 30              mov     IN,     DPL
0059: 85 83 31              mov     IN+1,   DPH
                   
005C: 90 01 C9              mov     dptr,   #serial_tx
005F: 85 82 32              mov     OUT,    DPL
0062: 85 83 33              mov     OUT+1,  DPH
                   
0065: 31 B7                 acall   serial_init
                   
                   ; SPCON register configuration:
                   ; .-----.-------.-------.-----------------------------------
                   ; | bit | name   | value | remark                           
                   ; |-----|-------|-------|-----------------------------------
                   ; | 7    | SPR2  | 1     | SPR2:0 = 101-> Fclk_periph / 64  
                   ; | 6    | SPEN  | 1     | Set to enable the SPI            
                   ; | 5    | SSDIS | 1     | Set to disable /SS input         
                   ; | 4    | MSTR  | 1     | Set to configure the SPI as a mas
                   ; | 3    | CPOL  | 0     | Cleared to have SCK idle at '0'  
                   ; | 2    | CPHA  | 0     | Cleared to sample on leading edge
                   ; | 1    | SPR1  | 0     | (see above)                      
                   ; | 0    | SPR0  | 1     | (see above)   speed: 312.5 kHz   
                   ; '-----'-------'-------'-----------------------------------
                   
0067: 75 C3 F1              mov     spcon,#0xf1
                   
                   ; 80 warmup pulses
006A: D2 91                 setb    p1.1
006C: 78 0A                 mov     r0,#10
                   init_sync:
006E: 74 FF                 mov     a,#0xff
0070: 31 AC                 acall   spi_transfer
0072: D8 FA                 djnz    r0,init_sync
                   
0074: 31 48                 acall   sd_select
                   
                   ; initialization sequence
0076: 11 DE                 acall   cmd0
0078: 11 EE                 acall   cmd8
007A: 31 05                 acall   cmd58
007C: 75 F0 14              mov     b,#20
                   init_loop:
007F: 31 27                 acall   acmd41
0081: 60 07                 jz      init_done
0083: 11 C7                 acall   delay
0085: D5 F0 F7              djnz    b,init_loop
0088: 80 39                 sjmp    abort
                   init_done:
008A: 31 05                 acall   cmd58
                   
                   ; read a block
008C: 74 11                 mov     a,#17
008E: 78 00                 mov     r0,#0x00 ; block address
0090: 79 00                 mov     r1,#0x00
0092: 7A 00                 mov     r2,#0x00
0094: 7B 00                 mov     r3,#0x00
0096: 7C 00                 mov     r4,#0x00 ; crc, ignored
0098: 31 66                 acall   sd_command
                   read_wait:
009A: 31 7C                 acall   sd_read_response1
009C: 31 D6                 acall   print_hex_8
009E: B4 FE F9              cjne    a,#0xfe,read_wait
00A1: 31 3B                 acall   newline
00A3: 78 00                 mov     r0,#0
                   read_loop: ; 512 bytes (256*2)
00A5: 74 FF                 mov     a,#0xff
00A7: 31 AC                 acall   spi_transfer
00A9: 31 D6                 acall   print_hex_8
00AB: 74 FF                 mov     a,#0xff
00AD: 31 AC                 acall   spi_transfer
00AF: 31 D6                 acall   print_hex_8
00B1: D8 F2                 djnz    r0,read_loop
00B3: 31 3B                 acall   newline
                   ; crc
00B5: 74 FF                 mov     a,#0xff
00B7: 31 AC                 acall   spi_transfer
00B9: 31 D6                 acall   print_hex_8
00BB: 74 FF                 mov     a,#0xff
00BD: 31 AC                 acall   spi_transfer
00BF: 31 D6                 acall   print_hex_8
00C1: 31 3B                 acall   newline
                   
                   abort:
00C3: 31 57                 acall   sd_deselect
                   
                   halt:
00C5: 80 FE                 sjmp    halt
                   
                   delay:
00C7: C0 E0                 push    acc
00C9: C0 F0                 push    b
00CB: E4                    clr     a
00CC: F5 F0                 mov     b,a
                   delay__loop:
00CE: 00                    nop
00CF: 00                    nop
00D0: 00                    nop
00D1: 00                    nop
00D2: 00                    nop
00D3: D5 E0 F8              djnz    acc,delay__loop
00D6: D5 F0 F5              djnz    b,delay__loop
00D9: D0 F0                 pop     b
00DB: D0 E0                 pop     acc
00DD: 22                    ret
                   
                   ; CMD0: go to idle state
                   cmd0:
00DE: E4                    clr     a
00DF: F8                    mov     r0,a
00E0: F9                    mov     r1,a
00E1: FA                    mov     r2,a
00E2: FB                    mov     r3,a
00E3: 7C 94                 mov     r4,#0x94
00E5: 31 66                 acall   sd_command
00E7: 31 7C                 acall   sd_read_response1
00E9: 31 D6                 acall   print_hex_8
00EB: 31 3B                 acall   newline
00ED: 22                    ret
                   
                   ; CMD8: send interface condition
                   cmd8:
00EE: 74 08                 mov     a,#8
00F0: 78 AA                 mov     r0,#0xaa
00F2: 79 01                 mov     r1,#0x01
00F4: 7A 00                 mov     r2,#0x00
00F6: 7B 00                 mov     r3,#0x00
00F8: 7C 86                 mov     r4,#0x86
00FA: 31 66                 acall   sd_command
00FC: 31 8E                 acall   sd_read_response7
00FE: 31 D6                 acall   print_hex_8
0100: 31 F6                 acall   print_hex_32
0102: 31 3B                 acall   newline
0104: 22                    ret
                   
                   ; CMD58: read operation conditions register
                   cmd58:
0105: E4                    clr     a
0106: F8                    mov     r0,a
0107: F9                    mov     r1,a
0108: FA                    mov     r2,a
0109: FB                    mov     r3,a
010A: FC                    mov     r4,a
010B: 74 3A                 mov     a,#58
010D: 31 66                 acall   sd_command
010F: 31 8E                 acall   sd_read_response3
0111: 31 D6                 acall   print_hex_8
0113: 31 F6                 acall   print_hex_32
0115: 31 3B                 acall   newline
0117: 22                    ret
                   
                   ; CMD55: application specific command (prefix)
                   cmd55:
0118: E4                    clr     a
0119: F8                    mov     r0,a
011A: F9                    mov     r1,a
011B: FA                    mov     r2,a
011C: FB                    mov     r3,a
011D: FC                    mov     r4,a
011E: 74 37                 mov     a,#55
0120: 31 66                 acall   sd_command
0122: 31 7C                 acall   sd_read_response1
0124: 31 D6                 acall   print_hex_8
0126: 22                    ret
                   
                   ; ACMD41: send operation condition
                   acmd41:
0127: 31 18                 acall   cmd55
0129: E4                    clr     a
012A: F8                    mov     r0,a
012B: F9                    mov     r1,a
012C: FA                    mov     r2,a
012D: 7B 40                 mov     r3,#0x40 ; indicates high capacity support
012F: FC                    mov     r4,a
0130: 74 29                 mov     a,#41
0132: 31 66                 acall   sd_command
0134: 31 7C                 acall   sd_read_response1
0136: 31 D6                 acall   print_hex_8
0138: 31 3B                 acall   newline
013A: 22                    ret
                   
                   newline:
013B: C0 E0                 push    acc
013D: 74 0D                 mov     a,#13
013F: 31 D1                 acall   print_char
0141: 74 0A                 mov     a,#10
0143: 31 D1                 acall   print_char
0145: D0 E0                 pop     acc
0147: 22                    ret
                   
                   ; >> void sd_select() <<
                   ; Activate the SD card
                   sd_select:
0148: C0 E0                 push    acc
014A: 74 FF                 mov     a,#0xff
014C: 31 AC                 acall   spi_transfer
014E: C2 91                 clr     p1.1
0150: 74 FF                 mov     a,#0xff
0152: 31 AC                 acall   spi_transfer
0154: D0 E0                 pop     acc
0156: 22                    ret
                   
                   ; >> void sd_deselect() <<
                   ; Deactivate the SD card
                   sd_deselect:
0157: C0 E0                 push    acc
0159: 74 FF                 mov     a,#0xff
015B: 31 AC                 acall   spi_transfer
015D: D2 91                 setb    p1.1
015F: 74 FF                 mov     a,#0xff
0161: 31 AC                 acall   spi_transfer
0163: D0 E0                 pop     acc
0165: 22                    ret
                   
                   ; >> void sd_command(char{a} cmd, uint32{r0-r3} arg, uint8{r
                   ; Issue a command to the SD card
                   sd_command:
                            ; transmit command
0166: 44 40                 orl     a,#0x40         ; transmission bit
0168: 31 AC                 acall   spi_transfer
                            ; transmit argument
016A: EB                    mov     a,r3
016B: 31 AC                 acall   spi_transfer
016D: EA                    mov     a,r2
016E: 31 AC                 acall   spi_transfer
0170: E9                    mov     a,r1
0171: 31 AC                 acall   spi_transfer
0173: E8                    mov     a,r0
0174: 31 AC                 acall   spi_transfer
                            ; transmit crc
0176: EC                    mov     a,r4
0177: 44 01                 orl     a,#0x01         ; end bit
0179: 31 AC                 acall   spi_transfer
017B: 22                    ret
                   
                   ; >> uint8{a} sd_read_response1()
                   ; Read response from SD card in 'R1' format into a
                   sd_read_response1:
017C: C0 F0                 push    b
017E: 85 08 F0              mov     b,8     ; number of tries
                   sd_read_response1__loop:
0181: 74 FF                 mov     a,#0xff
0183: 31 AC                 acall   spi_transfer
0185: B4 FF 03              cjne    a,#0xff,sd_read_response1__end  ; success
0188: D5 F0 F6              djnz    b,sd_read_response1__loop       ; retry / t
                   sd_read_response1__end:
018B: D0 F0                 pop     b
018D: 22                    ret
                   
                   ; >> uint8{a}, uint32{r0-r3} sd_read_response3()
                   ; Read response from SD card in 'R3' format into a and r0-r3
                   sd_read_response3: ; same as R7
                   ; >> uint8{a}, uint32{r0-r3} sd_read_response7()
                   ; Read response from SD card in 'R7' format into a and r0-r3
                   sd_read_response7:
018E: 31 7C                 acall   sd_read_response1
0190: B4 02 00              cjne    a,#0x02,sd_read_response7__1
                   sd_read_response7__1:
0193: 40 01                 jc      sd_read_response7__2
0195: 22                    ret     ; error in R1 response
                   sd_read_response7__2:
0196: F8                    mov     r0,a
0197: 74 FF                 mov     a,#0xff
0199: 31 AC                 acall   spi_transfer
019B: FB                    mov     r3,a
019C: 74 FF                 mov     a,#0xff
019E: 31 AC                 acall   spi_transfer
01A0: FA                    mov     r2,a
01A1: 74 FF                 mov     a,#0xff
01A3: 31 AC                 acall   spi_transfer
01A5: F9                    mov     r1,a
01A6: 74 FF                 mov     a,#0xff
01A8: 31 AC                 acall   spi_transfer
01AA: C8                    xch     a,r0
01AB: 22                    ret
                   
                   
                   ; *** library ***
                   
                   
                   ; *** spi/transfer.equ ***
                   
                   ; >> char{a} serial_transfer(char{a} data) <<
                   
                   ; SPI transfer function: send byte from a, read response int
                   
                   spi_transfer:
01AC: F5 C5                 mov     spdat,a
                   
                   spi_transfer__wait:
01AE: E5 C4                 mov     a,spsta
01B0: 54 80                 anl     a,#0x80         ;check SPIF bit
01B2: 60 FA                 jz      spi_transfer__wait
                   
01B4: E5 C5                 mov     a,spdat
01B6: 22                    ret
                   
                   ; *** serial/init.inc ***
                   
                   ; >> void serial_init() <<
                   
                   ; Initialize serial interface.
                   ; - assumes 20MHz clock and X2 mode
                   ; - uses internal baud rate generator
                   ; - speed: 9600 bits per second
                   ; Formula: BRL = 256 - (F_clk / (32 * Baud_Rate))
                   ; ---
                   ; See datasheet page 52 for details,
                   ; also note oscillator diagram on page 16!
                   
                   serial_init:
01B7: 75 98 52              mov     SCON,   #0x52   ; SM1, REN, TI
01BA: 75 9A BF              mov     BRL,    #191    ; 9600 @20MHz CLK
01BD: 75 9B 1E              mov     BDRCON, #0x1e   ; BRR, RBCK, TBCK, SPD
01C0: 22                    ret
                   
                   ; *** serial/rx.inc ***
                   
                   ; >> char serial_rx <<
                   
                   ; Receive byte into accumulator.
                   
                   serial_rx:
01C1: 30 98 FD              jnb     RI,     serial_rx
01C4: C2 98                 clr     RI
01C6: E5 99                 mov     a,      SBUF
01C8: 22                    ret
                   
                   ; *** serial/tx.inc ***
                   
                   ; >> void serial_tx(char a) <<
                   
                   ; Transmit byte from accumulator.
                   
                   serial_tx:
01C9: 30 99 FD              jnb     TI,     serial_tx
01CC: C2 99                 clr     TI
01CE: F5 99                 mov     SBUF,   a
01D0: 22                    ret
                   
                   ; *** print/char.inc ***
                   
                   ; >> void print_char(char a) <<
                   
                   ; Print char from accumulator.
                   ; Indirect call to function behind OUT pointer.
                   
                   print_char:
01D1: C0 32                 push    OUT
01D3: C0 33                 push    OUT+1
01D5: 22                    ret
                   
                   ; *** print/hex.inc ***
                   
                   ; >> void print_hex_8(char a) <<
                   
                   ; Print hexadecimal number from accumulator.
                   
                   print_hex_8:
01D6: C4                    swap    a       ; high nibble first
01D7: 31 DA                 acall   print_hex_8__nibble
01D9: C4                    swap    a
                   print_hex_8__nibble:
01DA: C0 E0                 push    ACC
01DC: 54 0F                 anl     a,      #0x0f
01DE: 24 90                 add     a,      #0x90
01E0: D4                    da      a
01E1: 34 40                 addc    a,      #0x40
01E3: D4                    da      a
01E4: 44 20                 orl     a,      #0x20   ; lower case
01E6: 31 D1                 acall   print_char
01E8: D0 E0                 pop     ACC
01EA: 22                    ret
                   
                   ; >> void print_hex_16(int r0r1) <<
                   
                   ; Print hexadecimal number from r0-r1.
                   
                   print_hex_16:
01EB: C0 E0                 push    ACC
01ED: E9                    mov     a,      r1      ; MSB first
01EE: 31 D6                 acall   print_hex_8
01F0: E8                    mov     a,      r0      ; LSB second
01F1: 31 D6                 acall   print_hex_8
01F3: D0 E0                 pop     ACC
01F5: 22                    ret
                   
                   ; >> void print_hex_32(long r0r1r2r3) <<
                   
                   ; Print hexadecimal number from r0-r3.
                   
                   print_hex_32:
01F6: C0 E0                 push    ACC
01F8: EB                    mov     a,      r3      ; MSB first
01F9: 31 D6                 acall   print_hex_8
01FB: EA                    mov     a,      r2
01FC: 31 D6                 acall   print_hex_8
01FE: E9                    mov     a,      r1
01FF: 31 D6                 acall   print_hex_8
0201: E8                    mov     a,      r0      ; LSB last
0202: 31 D6                 acall   print_hex_8
0204: D0 E0                 pop     ACC
0206: 22                    ret
